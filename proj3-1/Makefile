# Top-level Makefile for Project 3.
# 
# Targets:
#   gmake [ default ]        Compiles sources in src directory
#   gmake check              Compiles sources and runs tests.  The parameter
#                            APYC indicates which compiler to run.
#   gmake clean              Removes unnecessary files, including those that
#                            are reproducible.
#   gmake depend	     Compute makefile dependencies and store
#                            in .depend.  Use this whenever you add a new
#                            source file or change an #include line.
#   gmake really-clean       Same as 'clean', also removes the file .depend.
#

TESTLOG = tests.log

APYC = ./apyc

CXXFLAGS = -g -Wall

# List of normal C++ sources.  Add any new ones here
SRCS = apyc.cc ast.cc builtins.cc decls.cc environ.cc exprs.cc modules.cc \
       stmts.cc tokens.cc types.cc

# C++ top-level (i.e., as opposed to #included) sources that are generated
# by other rules in this Makefile.
GENERATED_SRCS = apyc-parser.cc

# List of all C++ object files
OBJS = $(GENERATED_SRCS:.cc=.o) $(SRCS:.cc=.o)

# List of all C++ sources generated by tools
OTHER_SRCS = horn-common.h horn-parse-lex.cc apyc-parser.* apyc-lexer.*

.PHONY: default compile check check1 check2 check-phase clean really-clean depend

# How to convert Horn .hn files into .cc files
%-parser.cc %-lexer.cc: %.hn
	horn $<

default: compile

compile: apyc

apyc: $(OBJS)
	$(CXX) -g -o $@ $(OBJS)

check:
	$(MAKE) check3

check1:
	$(MAKE) PHASE=1 check-phase 2>&1 | tee -a $(TESTLOG)
	@if test -f errflag; then code=1; else code=0; fi; \
         $(RM) errflag; exit $$code

check2:
	$(MAKE) PHASE=2 TEST_FLAGS="--prologue=tests/prologue" check-phase \
		| tee -a $(TESTLOG)
	@if test -f errflag; then code=1; else code=0; fi; \
         $(RM) errflag; exit $$code

check3:
	$(MAKE) PHASE=3 check-phase \
		| tee -a $(TESTLOG)
	@if test -f errflag; then code=1; else code=0; fi; \
         $(RM) errflag; exit $$code

check-phase: apyc
	@echo "Test start: `date`"
	@echo "Testing correct programs ($(PHASE))..."
	$(RM) errflag
	-python tests/test-proj$(PHASE) --compiler=$(APYC) \
		$(TEST_FLAGS) tests/correct$(PHASE)/*.py || touch errflag
	@echo
	@echo "Testing erroneous programs ($(PHASE))..."
	-python tests/test-proj$(PHASE) --errors --compiler=$(APYC) \
		$(TEST_FLAGS) tests/error$(PHASE)/*.py || touch errflag
	@echo "End test"

clean:
	$(RM) *~ *.o *.pyc *.ast *.tab.c *.output apyc
	$(RM) tests/*~ tests/*/*~
	$(RM) $(TESTLOG)
	$(RM) $(GENERATED_SRCS) $(OTHER_SRCS)

really-clean: clean
	$(RM) .depend

# Dependencies

apyc-parser.hh horn-common.h horn-parse-lex.cc: apyc-parser.cc

.depend:
	touch .depend
	$(MAKE) depend

depend: $(GENERATED_SRCS)
	$(RM) .depend
	$(CXX) -MM $(OBJS:.o=.cc) > .depend

-include .depend
