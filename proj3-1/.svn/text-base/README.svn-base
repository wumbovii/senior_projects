STUDENT PORTION:

Regarding the project compilation: seemingly the code generation and output into the desired *.cc file
works according to spec and produces the same output as an equivalent .py file.
Running the tests manually using the ./apyc -c (file) or ./apyc --phase=5 (file) commands
and subsequently running the "a.out" file seems to produce equivalent output to running
the the basefile in python. However, when running "gmake check" and running against
the autograder (which seemingly uses the same script), the Popen.communicate()
method seems to raise the fatal error "File too large," at compilation time.

In short, you may notice that the autograding script doesn't run properly with our code,
yet a comparison of the outputs between our generated C++ code and the accompanying
python code are identical. So please, take the time to verify that our code generation
is indeed functional and working (to an extent, we were not able to succesfully implement
classes on time) and that a large number of our tests pass (and we should pass at
least a large number of the elementary tests on the autograder). The python script
which runs these tests, however, seems to take issue with our code.

About the project code:
The codegen takes place in 5 major steps, outlined explicitly in the comments to the codeGen() method in
modules.cc.

Step 1: Output the header.
Step 2: Generate frames for all functions.
Step 3: Generate forward declarations of global variables.
Step 4: Generate code for functions and classes.
Step 5: Generate main.

We take advantage of the recursive declaration structure to assist us in recursively
generating the forward declarations before we actually begin generating C++ code.

Furthermore, we leverage the polymorphism of the node structures from the previous project
and the tree structure of the nodes to facilitate a recursive descent for our code generation.
That is, we simply call codeGen on a node and the codeGen for a given node knows to recursively
call codeGen on each of its relevant children (as appropriate). Each type of node has a unique
implementation of code generation, making this process very modular and scalable.



The files here are intended to be helpful, NOT to limit what you can do.
>>Ignore them entirely, if you prefer!<<  However, as indicated in the handout,
whatever you turn in must satisfy the following criteria:

1. 'gmake' must compile your program from scratch, producing an executable
   file 'apyc' in this directory.
2. 'gmake check' must run all your tests against your ./apyc program.
3. 'gmake APYC=PROG check' must run all your tests against the program
   PROG.
4. The command
      ./apyc -o FOO FOO1.py
   must produce an executable file FOO.
5. The executable programs your compiler produces should attempt an orderly
   exit with code 1 if there are any runtime errors.
6. Your executables must exit with code 0 otherwise.

Don't let anything in your finished program remain mysterious to you.
Try to understand everything that's here, and if you can't, then feel
free to ask us what's going on.

We judge your program by how it runs ON THE INSTRUCTIONAL SYSTEMS.  It's 
no good protesting that it works at home; your "customer" is not running on 
your home setup!

Be sure to submit your program properly (by copying to your team's (NOT your
personal) tags directory as proj3-N for integer numeral N.  I further suggest
that you check out the tag directories that you submit into new working
directories and make sure they compile and run properly (so that you can 
see if you are accidentally missing files).

The current contents of the files here are extremely skeletal as far
as code generation goes.  Don't expect that just because you see a
class or runtime library file in the skeleton, it is complete.
Furthermore, you are free to change or discard ANY PART of it as long
as your final program works according to spec.

Likewise, the tests are completely inadequate.

If you add a new source file, be sure to modify Makefile appropriately,
and 'svn add' it as well.  If you remove a file, modify Makefile and 
'svn remove' the old file.  Whenever you add or remove a file, or add, 
remove or modify an #include statement, be sure to run 'gmake depend'.
This keeps the Makefile informed of what depends on what.

MANIFEST:

        apyc.cc:     Contains the main program and some general utilities.
        apyc.h:      Some high-level interfaces between modules.
        ast.h:       Base classes for AST nodes.
        ast.cc:      Method definitions for base classes and
                     definitions for a few widely used AST subtypes.
        builtins.cc: Sets up the standard definitions.
        exprs.cc:    AST subclass definitions for expression-related types.
        stmts.cc:    AST subclass definitions for statement-related types.
        tokens.cc:   Definitions of token (leaf) AST subclasses.
        types.cc:    Definitions of nodes representing types.
        environ.cc:  Definitions for environs (symbol tables).
        decls.cc:    Definitions related to declarations.
        modules.cc:  Definitions related to modules.

        apyc.hn:     The parser/lexer grammar file.

        Makefile:    General directions for building and testing the program.
        README:      This file.

        staff-version: A tag file used to identify the version of the staff
                    skeleton that was last merged into the source
                    files.

        lib/apyc/
            runtime.h: Header files for the runtime library routines that may
                    be #included in the C++ programs your compiler produces.
            runtime.cc: Supporting runtime library routines.  Recompiled and
                    linked with your program when apyc is asked to produce an
                    executable file.

        tests/
            test-proj1:  A testing script for project 1.  It
                     runs the compiler, unparses the resulting AST,
                     runs Python on the result, and checks the output.
            test-proj2:  A testing script for project 2.  It
                     runs the compiler, unparses the resulting AST,
                     runs Python on the result, and checks the output.
            test-proj3:  A testing script for project 3.  It
                     runs the compiler to produce an executable, runs the
                     executable, and checks the output.

            limitexec: A script used by test-* scripts to limit execution
                     time.
            prologue: Used by test-proj[12] scripts to supply standard
                      definitions for our dialect.

            correct3/ Tests that are supposed to be correct programs
                     for phase 3.
                trivial.py, trivial.in, trivial.std:
                     A sample program, input file, and expected output file.

            error3/  Tests that are supposed to cause errors for
                     phase 3.
                triviallybad.py:
                     A sample erroneous program.
