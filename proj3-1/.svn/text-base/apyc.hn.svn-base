/* -*- mode: fundamental; c-file-style: "stroustrup"; indent-tabs-mode: nil -*- */

/* apyc: Bison Parser */

/* Authors: YOUR NAMES HERE */

%define semantic_tree_type "AST"

%token INT
%token STRING
%token ID

%{
   #include <string>
   #include "apyc.h"
   #include "ast.h"

   using namespace std;

   static AST_Ptr theTree;

    /** Assuming that TEXT is the whitespace at the beginning of a line, returns
     *  or queues the indicated INDENT and DEDENT tokens. */
    static int do_indent(const char* text);
    void Error (const char* loc, const char* format, ...);

    /** Nesting level of current source position in '[', '(', and '{'
     *  brackets. */
    static int bracket_depth;
    /** Current nesting depth within "if", "while", and "for" statements. */
    static int control_depth;
    /** Current nesting depth within "def" and "class" statements. */
    static int defn_depth;
    /** Current loop depth within "while" and "for" statements. */
    static int loop_depth;
    /** Current nesting depth within "def" statements (functions). */
    static int func_depth;

    /** Output an error message if a "def" statement is not permitted
     *  at the current source position. */
    static void check_def_placement ();
    /** Output an error message if a "class" statement is not permitted
     *  at the current source position. */
    static void check_class_placement ();
    /** Output an error message TEXT is not in the required range for
     *  integer numerals.  It is assumed to have the form of a valid
     *  numeral otherwise. */
    static void check_numeral (const char* text);
    /** Output an error message if not nested in the main body of a loop (
     *  (not including its "else" clause). */
    static void check_in_loop ();
    /** Output an error message if not nested inside a function definition. */
    static void check_in_func ();
    /** Output an error message if an "import" statement is not permitted
     *  at the current source position. */
    static void check_import_placement ();

    /** Create a "unop" node out of operator OP (a token) and operand
     *  RIGHT, using SYNTAX as the syntax of the node operator. */
    static AST_Ptr make_unop (int syntax, const List_Ptr& operands);
    /** Create a "binop" node out of operator OP (a token) and operands
     *  LEFT and RIGHT. */
    static AST_Ptr make_binop (const List_Ptr& operands);

    /** Create an id out of the text and location of TOKEN, which must be a
     *  token. */
    static AST_Ptr make_id (AST_Ptr& token);
    /** Create an id out of the text and location of (*OPERAND)[0]. OPERAND 
     *  must be a singleton list containing a token. */
    static AST_Ptr make_id (const List_Ptr& operand);

    /** Generate error with given MESSAGE at LOC if maxPhase >= phase. */
    static void disallow (Location_Type loc, int phase, const char* message);

    /** Join common type variables in children of NODE indicated by the
     *  int arguments (ending with -1).  */
     static void joinTypes (AST_Ptr node, ...);

    /** Increment COUNT. */
    static inline void
    incr (int& count)
    {
        count += 1;
    }

    /** Decrement COUNT, but no further than 0. */
    static inline void
    decr (int& count)
    { 
        count -= 1;
        if (count < 0)
            count = 0;
    }
%}

%debug
%define error_function Error

%left "or"
%left "and"
%left "not"
%left "<" ">" "==" ">=" "<=" "!=" "is" "in"
%left "|"
%left "^"
%left "&"
%left "<<" ">>" 
%left "+" "-"
%left "%" "*" "/" "//"
%left "~"
%right "**"

%token DIVDIV "//"
%token LSH "<<"
%token RSH ">>"
%token POW "**"

/* The following tokens represent keywords and node types, sometimes both.
 * In order to keep information about node types together, I've used a little 
 * trick.  In a rule such as
 *     if_stmt: "if"^ expression ":"! ...
 * where the relevant keyword also happens to coincide with the external
 * name of the AST operator corresponding to this statement, we define
 *     %token IF "if"
 * In a rule such as
 *     dict_display: "{"! key_datum_list? "}"! 
 *              { $$ = $^(DICT_DISPLAY, $*); }
 * where the there is no such correspondence, we define instead
 *     %token DICT_DISPLAY "@dict_display"
 * Since "@dict_display" is not a valid token (it would be an error for this
 * to appear in any Python program) and does not appear in the grammar, this
 * declaration has no effect on the lexical language recognized.  However, it
 * still provides an easy way to find the external name of an operator.
 * Suppose that yyexternal_token_name(SYNTAX) is NAME for an operator 
 * whose syntactic category is SYNTAX.  If NAME starts with k "@" characters,
 * then by default the external AST operator name for SYNTAX is NAME+k;
 * otherwise, it is simply NAME.  Hence, the lexical token strings can do double
 * duty.   This convention allows us to have several different operators with 
 * the same printed name, and also prevents operators whose names are not
 * keywords from interfering with the use of those names as legitimate
 * identifiers. */

%token AND "and"
%token ASSIGN "@assign"
%token ATTRIBUTEREF "@attributeref"
%token BINOP "@binop"
%token BLOCK "@block"
%token BREAK "break"
%token CALL "@call"
%token CALL1 "@call1"
%token CLASS "class"
%token CLASS_BLOCK "@@block"
%token COMPARISON "@comparison"
%token CONTINUE "continue"
%token DEDENT
%token DEF "def"
%token DICT_DISPLAY "@dict_display"
%token EMPTY
%token EXPR_LIST "@expr_list"
%token FOR "for"
%token FORMALS_LIST "@formals_list"
%token FORMALS_STAR_LIST "@formals_star_list"
%token FUNCTION_TYPE "@function_type"
%token FUNCTION_TYPE_STAR "@function_type_star"
%token ID_LIST "@id_list"
%token IF "if"
%token IF_EXPR "@if_expr"
%token IMPORT_FROM "@import_from"
%token IMPORT_MODULE "@import_module"
%token INDENT 
%token INT_LITERAL "@int_literal"
%token LAMBDA "lambda"
%token LIST_DISPLAY "@list_display"
%token METHOD "@def"
%token MODULE "@module"
%token NATIVE "native"
%token NEW "@new"
%token NOT "not"
%token OR "or"
%token PAIR "@pair"
%token PRINT "@print"
%token PRINTLN "@println"
%token RETURN "return"
%token SLICING "@slicing"
%token SLICING_TARGET "@@slicing"
%token STMT_LIST "@stmt_list"
%token STRING_LITERAL
%token SUBSCRIPTION "@subscription"
%token SUBSCRIPTION_TARGET "@@subscription"
%token TARGET_LIST "@target_list"
%token TUPLE "@tuple"
%token TYPE "@type"
%token TYPE_LIST "@type_list"
%token TYPE_VAR "@type_var"
%token TYPED_ID "@typed_id"
%token UNOP "@unop"
%token WHILE "while"

%token NEG UNOP_PLUS

%glr-parser

%expect-rr 18
%expect 2

%%

                    /* Lexical Rules */

_LETTER: 'a' .. 'z' | 'A' .. 'Z' 
    ;

_DIGIT: '0' .. '9' 
    ; 

_OCTAL: '0' .. '7'
    ;

/* Exclusions from our subset */
*:  ("as" | "try" | "yield" | "exec" | "del" | "future" | "with" | "assert" 
     | "except" | "finally" | "global" | "raise")
                { Error (yysource_location (), 
                         "The '%s' symbol is not part of our subset",
                         $TEXT); }
    ;

ID: (_LETTER | "_")  (_LETTER | _DIGIT | "_")* 
    ;

TYPE_VAR: '$' (_LETTER | _DIGIT | "_")* 
    ;

_OTHERCHAR: _ANY - '\n' - '"' - '\'' - '\\';

_ESCAPE: '\\' _ANY;

_NOT_NL_APOSTR: _OTHERCHAR | '"' | _ESCAPE
    ;

_NOT_NL_QUOTE: _OTHERCHAR | '\'' | _ESCAPE
    ;

_SHORTSTRING: "'" _NOT_NL_APOSTR* "'" | '"' _NOT_NL_QUOTE* '"'
    ;

*:    ("'" _NOT_NL_APOSTR* | '"' _NOT_NL_QUOTE*) 
                { Error (yysource_location (), "unterminated string"); }
    ;

_NOT_APOSTR: _OTHERCHAR | _ESCAPE | '"' | "\n" 
    ;
_NOT_QUOTE: _OTHERCHAR | _ESCAPE | '\'' | "\n" 
    ;

_LONGSTRING: 
      "'''" (_NOT_APOSTR* (( "'" | "''") _NOT_APOSTR)?)* "'''"
    | "\"\"\"" (_NOT_QUOTE* (( "\"" | "\"\"" ) _NOT_QUOTE)?)* "\"\"\"" 
    ;

*:   
      ("'''" (_NOT_APOSTR* (( "'" | "''") _NOT_APOSTR)?)*
    | "\"\"\"" (_NOT_QUOTE* (( "\"" | "\"\"" ) _NOT_QUOTE)?)*)
                { Error (yysource_location (), "unterminated long string"); }
    ;


STRING: _SHORTSTRING   
                { $$ = AST::make_token (STRING, $TEXT_SIZE-2, $TEXT+1, false); }
    ;
STRING: _LONGSTRING
                { $$ = AST::make_token (STRING, $TEXT_SIZE-6, $TEXT+3, false); }
    ;

RAWSTRING: ("r" | "R") _SHORTSTRING
                { $$ = AST::make_token (RAWSTRING, $TEXT_SIZE-3, $TEXT+2, false); }
    ;

RAWSTRING: ("r" | "R") _LONGSTRING
                { $$ = AST::make_token (RAWSTRING, $TEXT_SIZE-7, $TEXT+4, false); }
    ;

_POSDIGIT: '1' .. '9' 
    ;
  
_DECIMALINTEGER: _POSDIGIT _DIGIT* | "0"
    ;
  
_OCTINTEGER: "0" _OCTAL+ 
    ;
  
_HEXDIGIT: _DIGIT | 'a' .. 'f' | 'A' .. 'F' 
    ;
_HEXINTEGER: "0" ("x" | "X") _HEXDIGIT+ 
    ;
  
_INTEGER: _DECIMALINTEGER | _OCTINTEGER | _HEXINTEGER 
    ;

INT_LITERAL: _INTEGER { check_numeral ($TEXT); } 
    ;

*: "0x" | "0X" | "0" _DIGIT+ 
                { Error (yysource_location (), "invalid numeral"); }
    ;

_WS: ' ' | '\t' 
    ;

_NL: "\r"? "\n" 
    ;

_COMMENT: "#" (_ANY - '\n')* ; 

 
"(":            { incr (bracket_depth); } 
    ;
"[":            { incr (bracket_depth); } 
    ;
"{":            { incr (bracket_depth); } 
    ;
")":            { decr (bracket_depth); } 
    ;
"]":            { decr (bracket_depth); } 
    ;
"}":            { decr (bracket_depth); } 
    ;

*:    _BOL _WS* _COMMENT? _NL %prefer
    ;

*:    _BOL _WS* %prefer 
                { YYSET_TOKEN (do_indent($TEXT));  } 
    ;  

*:    _EOF 
                { int tok = do_indent (""); 
                  YYSET_TOKEN (tok < 0 ? 0: tok);
                } 
    ;

*:    _WS* _COMMENT?
    ;

NEWLINE: _NL 
                { if (bracket_depth > 0) {
                      yy_set_bol (0);
                      YYIGNORE;
                  }
                }
    ;

*:    "\\" _NL _WS*
                { yy_set_bol (0); }
    ;

*:    '\000' .. '\176' 
                { Error (yysource_location (), "invalid character"); }
    ;         

                        /* Main Grammar */

program: 
      (NEWLINE! | statement)* 
                { $$ = $^ (MODULE, $*);
                  $$.set_loc (NULL);
                  theTree = $$.value ();
                } 
    ;

identifier: ID
    ;

atom: identifier | literal | enclosure 
    ;
  
enclosure: parenth_form | list_display | dict_display 
    ;

literal: 
      stringliteral 
    | INT_LITERAL
    ;

stringliteral: (STRING | RAWSTRING)+ 
                { $$ = $^(STRING_LITERAL, $*); }
    ;

parenth_form: "("! expression ")"! 
    | "("! (expression ( ","! | (","! expression)+ ","!? ))? ")"! 
                { $$ = $^(TUPLE, $*); }
    ;

list_display: "["! ( expression (","! expression)* ","!? )? "]"! 
                { $$ = $^(LIST_DISPLAY, $*); }
    ;
  
dict_display: "{"! key_datum_list? "}"!
                { $$ = $^(DICT_DISPLAY, $*); }
    ;
  
key_datum_list: key_datum (","! key_datum)* ","!? 
    ;
  
key_datum: expression ":"! expression 
                { $$ = $^(PAIR, $*); }
    ;

primary: atom 
    | attributeref 
    | subscription
    | slicing 
    | call
    ;

attributeref: primary "."! identifier 
                { $$ = $^(ATTRIBUTEREF, $*); }
    ;

subscription: primary "["! expression_or_list "]"! 
      	        { $$ = $^ (SUBSCRIPTION, $*); }
    ;

slicing: primary "["! bound ":"! bound "]"! 
      	        { $$ = $^ (SLICING, $*); }
    ;

bound: 
      expression
    | empty
    ;

call: primary "("! argument_list ")"! 
                { $$ = $^(CALL, $*); }
    ;
  
argument_list: (expression (","! expression)* ","!?)?
                /* Trailing comma requires GLR*/
                { $$ = $^(EXPR_LIST, $*); }
    ;
  
expression: 
      conditional_expression
    | "lambda"! ("::"! rt=type | rt=empty) parameter_list ":"! expression
                { $$ = $^(LAMBDA, $parameter_list.value(), $rt.value(),
			  $expression.value()); 
		  joinTypes ($$.value (), 0, 1, -1);
                }
    ;

  
conditional_expression: 
      thenpart=expr1 "if"! cond=expr1 "else"! elsepart=expression 
                { $$ = $^(IF_EXPR, $cond.value(), $thenpart.value (), 
                          $elsepart.value ()); }
    | expr1
    ;

  
expr1: 
      expr2 
    | expr1 ("or"^ | "and"^) expr1 %expand
    | "not" expr1
                { $$ = make_unop (NOT, $*); }
    ;

expression_list_no_comma:
      expression (","! expression)*   /* Requires GLR for trailiing "," */
                { $$ = $^(EXPR_LIST, $*); }
    ;

expression_list0_no_comma:
      (expression (","! expression)*)?
                { $$ = $^(EXPR_LIST, $*); }
    ;

expression_or_list:
       expression
    | (expression ","!)+ expression?
                { $$ = $^(TUPLE, $*); }
    ;

expression_or_list0:
      expression_or_list
    | empty
    ;

comp_operator: 
      ("<" | ">" | "==" | "<=" | ">=" | "!=" | "is" | "in")
                { $$ = make_id($*); }
       | op="is" "not" 
                { $$ = make_id("isnot", $op.loc()); }
       | op="not" "in"
                { $$ = make_id("notin", $op.loc()); }  
    ;

expr2: 
      expr3 ( comp_operator expr3 )+ 
                { $$ = $^(COMPARISON, $*); }
    | expr3
    ;

expr3: 
      primary
    | "-" expr3 %prec "~"   
                { $$ = make_unop (NEG, $*); }
    | "+" expr3 %prec "~"
                { $$ = make_unop (UNOP_PLUS, $*); }
    | "~" expr3 { $$ = make_unop ('~', $*); }
    | expr3 
        ("+" | "-" | "*" | "/" | "//" | "%" | "<<" | ">>" | "&"
         | "|" | "^" | "**")
      expr3 %expand
                { $$ = make_binop ($*); }
    ;
             
simple_stmt:
      expression_stmt
    | assignment_stmt
    | pass_stmt
    | print_stmt
    | return_stmt
    | break_stmt
    | continue_stmt
    | import_stmt
    ;

expression_stmt: expression_or_list    
    ;

assignment_stmt: 
      target_list "="! expression_or_list
                { $$ = $^ (ASSIGN, $*); }
    | target_list "="! assignment_stmt
                { $$ = $^ (ASSIGN, $*); }
    ;

target_list: 
      target 
    | "("! target ")"!
    | target_list1
    | "("! target_list1 ")"!
    | "["! target_list1 "]"!
    | "["! target "]"!
                { $$ = $^ (TARGET_LIST, $*); }
    ;

target_list1:
    | target (","! target)+ ","!?
                { $$ = $^(TARGET_LIST, $*); }
    | target ","!
                { $$ = $^(TARGET_LIST, $target.value ()); }
    ;
  
target:  
      identifier            /* Requires GLR for resolution vs atom */
    | identifier type_annotation
                { $$ = $^(TYPED_ID, $*); 
		  joinTypes ($$.value (), 1, -1); }
    | attributeref          /* Requires GLR for resolution vs. primary */
    | subscription          /* Requires GLR for resolution vs. primary */
    | slicing               /* Requires GLR for resolution vs. primary */
    ;

pass_stmt: "pass"!   
                { $$ = $^(STMT_LIST); }
    ;

print_stmt: 
      "print"! empty expression_list0_no_comma
                { $$ = $^(PRINTLN, $*); }
    | "print"! ">>"! expression 
                { $$ = $^(PRINTLN, $expression.value (), $^(EXPR_LIST)); }
    | "print"! ">>"! expression ","! expression_list_no_comma
                { $$ = $^(PRINTLN, $*); }
    | "print"! empty expression_list_no_comma ","!
                { $$ = $^(PRINT, $*); }
    | "print"! ">>"! expression ","! expression_list_no_comma ","!
                { $$ = $^(PRINT, $*); }
    ;

return_stmt: "return"^ expression_or_list0
                { check_in_func (); }
    ;

break_stmt: "break"^ { check_in_loop (); }
    ;

continue_stmt: "continue"^ { check_in_loop (); }
    ;

import_stmt: 
     op="import"! id_list
                { $$ = $^(IMPORT_MODULE, $*); check_import_placement (); 
                  disallow ($op.loc (), 2, "imports not allowed for phase > 1");
                }
    | op="from"! module "import"! id_list
                { $$ = $^(IMPORT_FROM, $*); check_import_placement ();
                  disallow ($op.loc (), 2, "imports not allowed for phase > 1");
                }
    | op="from"! module "import"! "("! id_list ")"!
                { $$ = $^(IMPORT_FROM, $*); check_import_placement (); 
                  disallow ($op.loc (), 2, "imports not allowed for phase > 1");
                }
    ;
  
id_list:
      identifier (","! identifier)* 
                { $$ = $^(ID_LIST, $*); }
    ;

module: identifier ;
  
compound_stmt: 
      if_stmt
    | while_stmt
    | for_stmt
    | funcdef
    | classdef
    ;

stmts: 
      stmt_list NEWLINE!
    | NEWLINE! INDENT! statement+ DEDENT!
    | error! NEWLINE!
    | NEWLINE! INDENT! error! DEDENT!
    ;
  
suite:
      stmts     { $$ = $^(STMT_LIST, $*); }
    ;

statement: stmt_list NEWLINE! | compound_stmt
    ;
  
stmt_list: 
      simple_stmt (";"! simple_stmt)* ";"!? 
    ;

if_stmt: 
      "if"^ expression ":"!
                { incr (control_depth); } 
         suite
      elifs
                { decr (control_depth); }
    ;

elifs:
      "elif"! expression ":"! suite elifs 
                { $$ = $^ (IF, $*); }
    | else_clause
    ;

else_clause:
       /* empty */
                { $$ = $^(STMT_LIST); }
    | "else"! ":"! suite
    ;

while_stmt: 
      "while"^ expression ":"! 
                { incr (control_depth); incr (loop_depth); } 
           suite
                { decr (loop_depth); }
      else_clause
                { decr (control_depth); }
    ;

for_stmt: 
      "for"^ target_list "in"! expression_or_list ":"! 
                { incr (control_depth); incr (loop_depth); } 
           suite
                { decr (loop_depth); }
      else_clause
                { decr (control_depth); }
    ;

funcdef: 
      "def"! funcname "("! parameter_list ")"! opt_type_annotation ":"! 
                { check_def_placement (); 
                  incr (defn_depth); incr (func_depth); }
           funcbody
                { decr (defn_depth); decr (func_depth); 
		  if (func_depth != 0 || defn_depth != 1)
		      $$ = $^ (DEF, $*); 
		  else
		      $$ = $^ (METHOD, $*); 
		  joinTypes ($$.value(), 1, 2, -1);
                }


    ;

funcbody:
      stmts     { $$ = $^(BLOCK, $*); }
    | native    { $$ = $^(BLOCK, $*); }
    | NEWLINE! INDENT! native DEDENT!
                { $$ = $^(BLOCK, $*); }
    ;

native:
      "native"^ stringliteral NEWLINE! 
    ;

parameter_list: 
      /* empty */
                { $$ = $^(FORMALS_LIST); }
    | (parameter ","!)* parameter ","!? 
                { $$ = $^(FORMALS_LIST, $*); }
    | (parameter ","!)* "*"! identifier 
                { $$ = $^(FORMALS_STAR_LIST, $*); 
                  disallow ($identifier.loc (), 
                            2, "star parameters not allowed for phase > 1");
                }
    ;
  

parameter: identifier 
    | identifier type_annotation  { $$ = $^(TYPED_ID, $*); }
    ;
  
funcname:  identifier ;

classdef: "class"^ name=identifier "("! parent=identifier ")"! ":"! 
                { check_class_placement (); incr (defn_depth); } 
               classbody
                { decr (defn_depth); }
    ;
  
classbody:
      stmts     { $$ = $^(CLASS_BLOCK, $*); }
    ;

type_annotation: "::"! type
    ;

opt_type_annotation: 
      type_annotation
    | empty
    ;      

type: 
      identifier type_params
                { $$ = $^(TYPE, $*); }
    | TYPE_VAR
                { $$ = $^(TYPE_VAR, make_id ($*)); }
    | "("! type_list ")"! "->"! type
                { $$ = $^(FUNCTION_TYPE, 
                          $type.value (), $type_list.value ()); }
    | "("! type_list_star ")"! "->"! type
                { $$ = $^(FUNCTION_TYPE_STAR, 
                          $type.value (), $type_list_star.value ());
                  disallow ($type_list_star.loc (), 
                            2, "star function types not allowed for phase > 1");
                }
    ;

type_params :
      ( "("! types ")"! )?
                { $$ = $^(TYPE_LIST, $*); }
    ; 

type_list :
      types?    { $$ = $^(TYPE_LIST, $*); }
    ;

type_list_star:
      "*"! type { $$ = $^(TYPE_LIST, $*); }
    | types ","! "*"! type
                { $$ = $^(TYPE_LIST, $*); }
    ;

types: 
      type
    | types ','! type
    ;

empty:
      /* empty */
                { $$ = $^(EMPTY); $$.set_loc (yysource_location ()); }
    ;

%%

#include <stack>
#include <cstdarg>

static stack<int> indentation_stack;
bool debugParser;

static void
check_def_placement ()
{
    if (control_depth > 0)
        Error (yysource_location (), "illegally nested def statement");
}

static void
check_class_placement ()
{
    if (control_depth > 0 || defn_depth > 0)
        Error (yysource_location (), "illegally nested class definition");
}

static void
check_import_placement ()
{
    if (control_depth > 0 || defn_depth > 0)
        Error (yysource_location (), "illegally nested import statement");
}

static void
check_in_loop ()
{
    if (loop_depth == 0)
        Error (yysource_location (), "statement must be in a loop");
}

static void
check_in_func ()
{
    if (func_depth == 0)
        Error (yysource_location (), "statement must be in a function body");
}

static void
check_numeral (const char* text)
{
    if (text[0] == '0' && (text[1] == 'x' || text[1] == 'X')) {
        text += 2;
        while (*text == '0')
            text += 1;
        if (strlen (text) > 8 || 
            (strlen (text) == 8 && strcmp (text, "80000000") > 0))
            Error (yysource_location (), "hex numeral too large");
    } else if (text[0] == '0') {
        while (*text == '0')
            text += 1;
        if (strlen (text) > 11 || 
            (strlen (text) == 11 && strcmp (text, "20000000000") > 0))
            Error (yysource_location (), "octal numeral too large");
    } else if (strlen (text) > 10 || 
            (strlen (text) == 10 && strcmp (text, "2147483648") > 0))
            Error (yysource_location (), "decimal numeral too large");
}

/** The equivalent number of spaces to TEXT, a sequence of whitespace 
 *  characters. */
static int
indent_length (const char* text)
{
    int n;
    n = 0;
    for (const char* p = text; *p != '\0'; p += 1) {
        if (*p == '\t')
            n = (n + 8) & ~7;
        else
            n += 1;
    }
    return n;
}

static int
do_indent (const char* text)
{
    int amount = indent_length (text);

    if (indentation_stack.empty())
        indentation_stack.push (0);
    
    if (amount > indentation_stack.top ()) {
        indentation_stack.push (amount);
        return INDENT;
    }

    if (amount < indentation_stack.top ()) {
        indentation_stack.pop ();
        while (amount < indentation_stack.top ()) {
            yyqueue_token (DEDENT, 0, 0, "", 8);
            indentation_stack.pop ();
        }
        if (amount != indentation_stack.top ()) {
            Error (text, "improper indentation");
        }
        return DEDENT;
    }

    return -1;
}

static AST_Ptr
make_unop (int syntax, const List_Ptr& operands)
{
    return YYMAKE_TREE (syntax,
                        make_id (operands->at (0)),
                        operands->at (1));
}

static AST_Ptr
make_binop (const List_Ptr& operands)
{
    return YYMAKE_TREE (operands->at (1)->syntax (),
                        operands->at (0), make_id (operands->at (1)),
                        operands->at (2));
}

static AST_Ptr
make_id (AST_Ptr& token)
{
    AST_Ptr result = AST::make_token (ID, token->text_size (), 
                                      token->as_chars (), false);
    result->set_loc (token->loc ());
    return result;
}

static AST_Ptr
make_id (const List_Ptr& operands)
{
    return make_id (operands->at (0));
}

static void
disallow (Location_Type loc, int phase, const char* message)
{
   if (maxPhase >= phase)
       Error (loc, "%s", message);
}

static void
joinTypes (AST_Ptr node, ...)
{
    va_list ap;
    va_start (ap, node);
    AST::AST_Map env;
    while (true) {
	int c = va_arg (ap, int);
	if (c < 0)
	    break;
	node->replace (c, node->child(c)->joinTypes (env));
    }
}

int
AST::lineNumber ()
{
    return yylocation_line (loc ());
}

AST_Ptr
parse (FILE* f, const string& name)
{
    if (debugParser)
	yydebug = 1;
    yypush_lexer (f, name);
    theTree = NULL;
    yyparse ();
    return theTree;
}
