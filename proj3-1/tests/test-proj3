#!/usr/bin/env python

import os, sys, re
from subprocess import Popen, PIPE
from getopt import getopt, GetoptError

def Usage():
    print '''
Usage: test-proj3 [ --errors ] [ --compiler=COMPILER ] [ --show=N ] \
                  DIR/BASE.py ...
    Runs COMPILER (default ./apyc) on each DIR/BASE.py with the command

        COMPILER -o PROG DIR/BASE.py 
        
    producing an executable file, PROG.  It is always an error if this
    fails.  Otherwise, runs PROG, using DIR/BASE.in as the contents of
    the standard input, if it is present, and otherwise uses the empty file.
    In the ahsence of --errors, requires that PROG terminate normally and
    compares the output to file DIR/BASE.std, if that is present.

    With the --errors option, checks that PROG exits with a
    non-zero, non-signal exit code. 

    Shows up to N test cases that cause errors (unlimited if defaulted).

    Reports results and exits with 0 if there are no errors, and
    with 1 otherwise.'''

def Run(command, *args, **keys):
    if args:
        command = command % args
    proc = Popen (command, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    out, err = proc.communicate(keys.get ('stdin', ''))
    return proc.returncode, out, err

def Remove(file):
    try:
        os.unlink(file)
    except OSError:
        pass

def Contents(file):
    try: 
        f = open(file)
        r = f.read()
        f.close()
        return r
    except:
        return ""

def FullCompile(prog, out):
    global Stdout, Stderr, Code
    Code, Stdout, Stderr = Run("%s/limitexec %s -o %s %s", mydir, compiler, out, prog)
    return Code == 0

def HasCompilerError(errout):
    return re.search (r'(?m)^[^:]+\.py:\d+:\s*\S', errout)

def IsCrash(code):
    return code >= 128

def Execute(prog, inp):
    global Stdout, Stderr, Code
    Code, Stdout, Stderr = Run("%s/limitexec %s",
                               mydir, prog, stdin=inp)
    return Code == 0

def ExecuteTest(progfile, dir, base):
    inp = Contents(os.path.join(dir, base + ".in"))
    std = Contents (os.path.join(dir, base + ".std"))
    executable = os.path.join(".", base)
    if not FullCompile(progfile, base):
        if IsCrash(Code):
            msg = "FAIL (compiler crashes)"
        else:
            msg = "FAIL (compilation error)"
    elif HasCompilerError(Stderr):
        msg = "FAIL (compilation error)"
    elif errors:
        if Execute(executable, inp):
            msg = "FAIL (missing execution error)"
        elif IsCrash(Code):
            msg = "FAIL (execution crashed)"
        else:
            msg = "OK"
    elif not Execute(executable, inp):
        if IsCrash(Code):
            msg = "FAIL (execution crashed)"
        else:
            msg = "FAIL (execution error)"
    elif std and std != Stdout:
        msg = "FAIL (wrong output)"
    else:
        msg = "OK"
    Remove(executable)
    return msg

try:
    opts, tests = getopt (sys.argv[1:], 'h',
                          ['help', 'errors', 'compiler=', 'show='])
except GetoptError:
    Usage()
    sys.exit(1)

mydir = (os.path.dirname (sys.argv[0]) or '.')

compiler = './apyc'
errors = False
show = None

for opt, val in opts:
    if opt in ( '-h', '--help' ):
        Usage()
        sys.exit(0)
    elif opt == '--errors':
        errors = True
    elif opt == '--compiler':
        compiler = val
    elif opt == '--show':
        show = int(val)

N = 0
OK = 0

for f in tests:
    N += 1
    dir, file = os.path.split(f)
    base = os.path.splitext(file)[0]
    print base + ".py:",
    msg = ExecuteTest(f, dir, base)

    print msg
    if msg == "OK":
        OK += 1
    elif show:
        print "Python source that caused this problem (%s):" % file
        print "-" * 50
        sys.stdout.write (Contents(f))
        print "-" * 50
        print
        show -= 1
    elif show is 0:
        print "  [Source file not shown: exceeded limit on number of files to display.]"

print
print "Ran %d tests." % N,
if OK == N:
    print "All passed."
    sys.exit(0)
else:
    print "%d failed." % (N - OK)
    sys.exit(1)

