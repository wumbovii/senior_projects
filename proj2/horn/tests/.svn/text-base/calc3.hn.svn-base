/* A calculator for integer expressions. Input is a sequence of 
 * expressions separated by semicolons or newlines.  The value of
 * each expression is the output.  Expressions may contain integer 
 * numerals, parentheses, and the operators "+", "-" (both unary and
 * binary), "*", "/", and "**"  (exponentiation).  In addition, 
 * juxtaposing two expressions (as in "3 (4+5)") is an alternative 
 * notation to multiplication.  The "**" operator has highest
 * precedence; followed by "*", "/", and juxtaposition; followed by 
 * unary "-", and finally "+" and "-".  Unary "-" is only valid 
 * at the beginning of an expression or immediately after a "(", so
 * that 3-4 yields -1, not -12. */

%{
  using namespace std;

  extern void ERROR (const char*,...);
%}

%interactive

%debug

%%

result : /* EMPTY */
       | result expr ';' { printf ("= %d\n", $expr.value()); }
       ;

expr : term
     | expr '+' term 	{ $$ = $expr.value() + $term.value(); }
     | expr '-' term 	{ $$ = $expr.value() - $term.value(); }
     | '-' term		{ $$ = -$term.value(); }
     ;

term : factor	
     | term '*'	factor  { $$ = $term.value() * $factor.value(); }
     | term '/' factor  { $$ = $term.value() / $factor.value(); }
     | term factor	{ $$ = $term.value() * $factor.value(); }
     ;

factor : primary
       | primary "**" factor 
       	                { if ($factor.value() == 0 && $primary.value() != 0) 
			     $$ = 1;
                          else if ($factor.value() <= 0)
			     ERROR ("Invalid exponent: %d", $factor.value());
			  else {
			     int n = $factor.value() - 1;
			     $$ = $primary.value();
			     while (n > 0) {
			     	$$ = $$.value() * $primary.value();
				n -= 1;
			     }
			  }
                        }
       ;

primary : INT
	| '(' expr ')'	{ $$ = $expr; }
	;

/* Lexical rules */

_DIG : '0' .. '9'
     ;

INT : _DIG+   { $$ = atoi($TEXT); }
    ;

* : ' ' | '\t' | '\n'
  ;

%%

#include <cstdarg>
#include <cstdio>

using namespace std;

int
make_token (int x, const char*, size_t)
{
    return 0;
}

void
ERROR (const char* fmt, ...) {
  va_list ap;
  va_start (ap, fmt);
  vfprintf (stderr, fmt, ap);
  va_end (ap);
}

main ()
{
  yyparse ();
}
