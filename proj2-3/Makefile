# Top-level Makefile for Project 2.
# 
# Targets:
#   gmake [ default ]        Compiles sources in src directory
#   gmake check              Compiles sources and runs tests.  The parameter
#                            APYC indicates which compiler to run.
#   gmake clean              Removes unnecessary files, including those that
#                            are reproducible.
#   gmake depend	     Compute makefile dependencies and store
#                            in .depend.  Use this whenever you add a new
#                            source file or change an #include line.
#   gmake really-clean       Same as 'clean', also removes the file .depend.
#

APYC = ./apyc

CXXFLAGS = -g -Wall

GOODTEST = python tests/test-proj$(PHASE)

BADTEST = python tests/test-proj$(PHASE) --errors

# List of normal C++ sources.  Add any new ones here
SRCS = apyc.cc ast.cc decls.cc environ.cc exprs.cc modules.cc stmts.cc \
       tokens.cc types.cc

# C++ top-level (i.e., as opposed to #included) sources that are generated
# by other rules in this Makefile.
GENERATED_SRCS = apyc-parser.cc

# List of all C++ object files
OBJS = $(GENERATED_SRCS:.cc=.o) $(SRCS:.cc=.o)

# List of all C++ sources generated by tools
OTHER_SRCS = horn-common.h horn-parse-lex.cc apyc-parser.* apyc-lexer.*

.PHONY: default compile check check1 check2 clean really-clean depend

# How to convert Horn .hn files into .cc files
%-parser.cc %-lexer.cc: %.hn
	horn $<

default: compile

compile: apyc

apyc: $(OBJS)
	$(CXX) -g -o $@ $(OBJS)

check:
	$(MAKE) PHASE=1 check-phase
	$(MAKE) PHASE=2 check-phase

check-phase: compile
	@if [ -d tests/correct$(PHASE) -o -d tests/correct$(PHASE) ]; then \
	    echo "Testing correct programs (phase $(PHASE)...)"; \
	    code=0; rm -f errflag; \
	    $(GOODTEST) --compiler=$(APYC) tests/correct$(PHASE)/*.py \
                || code=1; \
            echo; \
	    echo "Testing erroneous programs (phase $(PHASE)...)"; \
	    $(BADTEST) --compiler=$(APYC) tests/error$(PHASE)/*.py \
	         || code=1; \
            exit $$code; \
        else \
            echo "Note: no phase $(PHASE) tests found."; exit 0; \
        fi

clean:
	$(RM) *~ *.o *.pyc *.ast *.tab.c *.output apyc
	$(RM) tests/*~ tests/*/*~
	$(RM) $(GENERATED_SRCS) $(OTHER_SRCS)

really-clean: clean
	$(RM) .depend

# Dependencies

apyc-parser.hh horn-common.h horn-parse-lex.cc: apyc-parser.cc

.depend:
	touch .depend
	$(MAKE) depend

depend: $(GENERATED_SRCS)
	$(RM) .depend
	$(CXX) -MM $(OBJS:.o=.cc) > .depend

-include .depend
